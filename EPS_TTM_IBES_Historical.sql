/*
    @AUTHOR:    PRAVEEN KUMAR V
    @COMPONENT: PART 1 OF 2. PLEASE REFERENCE DS PRICING IN IBES CURRENCY FOR PART 2
    @DESC:      THIS QUERY WILL PULL HISTORICAL TTM EPS

     
    @EDITS:     4/17/2018: UPDATED QUERY LOGIC TO REMOVE ISNULL FUNCTION. NULL VALUES WILL NOW CAUSE FINAL VALUE TO RESULT IN NULL
                4/18/2018: UPDATED QUERY LOGIC TO PESUDO NULL VALUES IN THE ACTUAL REPORTED AND ESTIMATE IBES TABLES. -99999 VALUES NOW SHOW AS NULL
                5/14/2018: ADDED BPN TO GBP CURRENCY CONVERSION FOR USESTDATA CTE
                5/18/2018: ADDED COMMENTS & VERSION CONTROL
                5/22/2018: REMOVED UNNEEDED ORDER BYS AND GROUP BYS, CLEANED UP SEMICOLONS IN DECLARES, AND REMOVED COMPANY FILTERS.
                5/22/2018: DDED STARTDATE, ENDDATE AND COUNTRYOFEXCHANGE
                6/06/2018: UG FIX OF US DATA FOR END DATE, ALSO SPACING
                7/03/2018: HANGED JOIN TO LEFT JOIN FOR E2 TABLE
                7/24/2018: MODIFIED QUERY TO REPLICATE DFO FUNCTIONALITY
               10/08/2018: UPDATED LOGIC TO PULL DATA CORRESPONDING TO THE MOST RECENT PARENT/CONSOLIDATED FLAG
               10/22/2018: ADDED P/C CONDITION & BASIS FLAG
*/
     
DECLARE @STARTDATE SMALLDATETIME = '2010-01-01'; --@STARTDATE
DECLARE @ENDDATE SMALLDATETIME = GETDATE();   --@ENDDATE
    
---- IBES MAPPING
WITH IBESV1MAPPING AS (SELECT *,1 AS REGCODE FROM SECMAPX WHERE VENTYPE = 42 UNION ALL SELECT *,6 AS REGCODE FROM GSECMAPX WHERE VENTYPE = 2)
 
---- RETRIEVES MOST RECENT PRIMARY BASIS AND HISTORICAL PRIMARY BASIS
, PRIMARYBASIS AS (SELECT  B.CODE AS CODE_QFS
    , B.PRIMARYFLAG  AS PRIMARYFLAGQFS 
    , B.ENTRYDATE  AS DATE_QFS
    , A.CODE AS CODE_HIST
    , A.DATE_ AS DATE_HIST
    , A.CANCURR AS CANCURR_HIST
    , CASE WHEN (B.PRIMARYFLAG = 'P' AND A.CANCURR IN ('C','')) OR (B.PRIMARYFLAG = 'C' AND A.CANCURR= 'P') THEN 2 ELSE 1 END AS HISTORICALBASISFLAG
     FROM IBGSHIST3 A 
     OUTER APPLY (SELECT TOP 1 B.CODE, B.PRIMARYFLAG, B.ENTRYDATE
                           FROM IBGQPRIMMSR B 
                           WHERE A.CODE=B.CODE 
                           ORDER BY B.ENTRYDATE DESC) B)
    
---- IBES CURRENCY TABLES
, IBESCURR AS (SELECT *,1 AS REGCODE FROM IBESCUR  UNION ALL SELECT *,6 AS REGCODE FROM IBGSCUR)
    
---- IBES SUMMARY ACTUALS DATA TO GET FY1, FY2 & FY3 MEAN DATA
, USACTDATA AS (SELECT A.CODE, A.DATE_, A.FYDATE, (NULLIF(A.FYVALUE,-99999)/ISNULL(B.SPLITFACTOR,1)) AS FYVALUE -- CASE STATEMENT TO CONVERT PENCE TO POUNDS 
    FROM IBESACTL1 A 
    LEFT JOIN IBQSPL B  
        ON  B.CODE=A.CODE 
        AND B.ENTRYDATE > (SELECT MAX(DATE_) FROM IBESADJ) --ONLY SPLITS ENTERED SINCE MONTHLY REFRESH 
    WHERE A.DATE_ >= @STARTDATE AND A.DATE_ < @ENDDATE AND A.MEASURE=8)
    
---- IBES GLOBAL SUMMARY ACTUALS DATA TO GET FY1, FY2 & FY3 MEAN DATA
, GACTDATA AS (SELECT A.CODE, A.DATE_, A.FYDATE, (NULLIF(A.FYVALUE,-99999)/ISNULL(B.SPLITFACTOR,1))  AS FYVALUE -- CASE STATEMENT TO CONVERT PENCE TO POUNDS 
        FROM (SELECT *, '1' AS HISTORICALBASISFLAG FROM IBGSACTL1 UNION SELECT *, '2' AS HISTORICALBASISFLAG FROM IBGS2NDACTL1) A
    OUTER APPLY (SELECT TOP 1 * --  A1.CODE_HIST, A1.HISTORICALBASISFLAG
        FROM  PRIMARYBASIS A1
        WHERE A.CODE=A1.CODE_HIST 
            AND A.HISTORICALBASISFLAG=A1.HISTORICALBASISFLAG
            AND A1.DATE_HIST <= A.DATE_ 
        ORDER BY A1.DATE_HIST DESC ) A1
    LEFT JOIN IBGQSPL B 
        ON  B.CODE=A.CODE 
        AND B.ENTRYDATE > (SELECT MAX(DATE_) FROM IBGSADJ) --ONLY SPLITS ENTERED SINCE MONTHLY REFRESH 
    WHERE A.DATE_ >= @STARTDATE AND A.DATE_ < @ENDDATE AND A.MEASURE=8 AND A.HISTORICALBASISFLAG=A1.HISTORICALBASISFLAG)
    
, ACTDATA AS (SELECT A.CODE, A.DATE_, A.FYDATE, CASE WHEN B.CURRENCY_= 'BPN' THEN (A.FYVALUE/100) ELSE A.FYVALUE END AS FYVALUE, -- CASE STATEMENT TO CONVERT PENCE TO POUNDS FOR ESTIMATES
        CASE WHEN B.CURRENCY_ = 'BPN' THEN 'GBP' ELSE B.CURRENCY_ END AS QAD_CURRENCY_, A.REGCODE --,C.CURRENCY_ AS DFO_CURRENCY_
    FROM (SELECT *,1 AS REGCODE FROM USACTDATA  UNION ALL SELECT *,6 AS REGCODE FROM GACTDATA ) A
    OUTER APPLY (SELECT TOP 1 B.CODE, B.CURRENCY_ FROM  IBESCURR B WHERE B.CODE=A.CODE AND B.REGCODE=A.REGCODE AND B.DATE_ <= A.DATE_ ORDER BY B.DATE_ DESC) B
    --OUTER APPLY (SELECT TOP 1 B.CODE, B.CURRENCY_ FROM  IBESCURR B WHERE B.CODE=A.CODE AND B.REGCODE=A.REGCODE ORDER BY B.DATE_ DESC) C 
    WHERE A.DATE_ > = @STARTDATE AND A.DATE_ < @ENDDATE)
    
---- IBES SUMMARY ESTIMATE DATA TO GET FY1, FY2 & FY3 MEAN DATA    
, USESTDATA AS (
    SELECT A.CODE,A.MEASURE,A.ESTDATE, A.PERDATE,A.PERIOD, A.PERTYPE ,CASE WHEN C.CURRENCY_= 'BPN' THEN 'GBP' ELSE C.CURRENCY_ END AS QAD_CURRENCY_, --D.CURRENCY_ AS DFO_CURRENCY_,
        CASE WHEN C.CURRENCY_= 'BPN' THEN (NULLIF(A.MEAN,-99999)/ISNULL(B.SPLITFACTOR,1))/100 ELSE (NULLIF(A.MEAN,-99999)/ISNULL(B.SPLITFACTOR,1)) END AS MEAN -- CASE STATEMENT TO CONVERT PENCE TO POUNDS 
    FROM IBESESTL1 A 
    LEFT JOIN IBQSPL B  
        ON  B.CODE=A.CODE 
        AND B.ENTRYDATE > (SELECT MAX(DATE_) FROM IBESADJ)--ONLY SPLITS ENTERED SINCE MONTHLY REFRESH 
    OUTER APPLY (SELECT TOP 1 C.CODE, C.CURRENCY_ FROM  IBESCUR C WHERE C.CODE=A.CODE AND C.DATE_ <= A.ESTDATE ORDER BY C.DATE_ DESC) C
    --OUTER APPLY (SELECT TOP 1 C.CODE, C.CURRENCY_ FROM  IBESCUR C WHERE C.CODE=A.CODE ORDER BY C.DATE_ DESC) D
    WHERE A.ESTDATE >= @STARTDATE AND A.ESTDATE < @ENDDATE AND A.MEASURE=8 AND A.PERTYPE=1
)
    
---- IBES SUMMARY GLOBAL ESTIMATE DATA TO GET FY1, FY2 & FY3 MEAN DATA    
, GESTDATA AS (
    SELECT A.CODE,A.MEASURE,A.ESTDATE, A.PERDATE,A.PERIOD, A.PERTYPE, CASE WHEN C.CURRENCY_= 'BPN' THEN 'GBP' ELSE C.CURRENCY_ END AS QAD_CURRENCY_, --D.CURRENCY_ AS DFO_CURRENCY_,
        CASE WHEN C.CURRENCY_= 'BPN' THEN (NULLIF(A.MEAN,-99999)/ISNULL(B.SPLITFACTOR,1))/100 ELSE (NULLIF(A.MEAN,-99999)/ISNULL(B.SPLITFACTOR,1)) END AS MEAN -- CASE STATEMENT TO CONVERT PENCE TO POUNDS 
    FROM (SELECT *, '1' AS HISTORICALBASISFLAG FROM IBGSESTL1 UNION SELECT *, '2' AS HISTORICALBASISFLAG FROM IBGS2NDESTL1) A
    OUTER APPLY (SELECT TOP 1 * --  A1.CODE_HIST, A1.HISTORICALBASISFLAG
        FROM  PRIMARYBASIS A1
        WHERE A.CODE=A1.CODE_HIST 
            AND A1.DATE_HIST <= A.ESTDATE 
            AND A.HISTORICALBASISFLAG=A1.HISTORICALBASISFLAG
        ORDER BY A1.DATE_HIST DESC ) A1
    LEFT JOIN IBGQSPL B 
        ON  B.CODE=A.CODE 
        AND B.ENTRYDATE>(SELECT MAX(DATE_) FROM IBGSADJ )--ONLY SPLITS ENTERED SINCE MONTHLY REFRESH 
    OUTER APPLY (SELECT TOP 1 C.CODE, C.CURRENCY_ FROM  IBGSCUR C WHERE C.CODE=A.CODE AND C.DATE_ <= A.ESTDATE ORDER BY C.DATE_ DESC) C
    --OUTER APPLY (SELECT TOP 1 C.CODE, C.CURRENCY_ FROM  IBGSCUR C WHERE C.CODE=A.CODE ORDER BY C.DATE_ DESC) D
    WHERE  A.ESTDATE >= @STARTDATE AND A.ESTDATE < @ENDDATE AND A.MEASURE=8 AND A.PERTYPE=1 AND A.HISTORICALBASISFLAG=A1.HISTORICALBASISFLAG)
    
, ESTDATA AS (SELECT *,1 AS REGCODE FROM USESTDATA  UNION ALL SELECT *,6 AS REGCODE FROM GESTDATA)
    
, T_12 AS (SELECT
        U.COUNTRYOFEXCHANGE,
        U.SECCODE, 
        U.REGCODE,
        U.ID,
        U.IDENTIFIER,
        I.ITICKER,
        I.CODE, 
        A1.QAD_CURRENCY_,
        --A1.DFO_CURRENCY_,
        E1.ESTDATE, 
        E1.PERDATE AS FY1_PERDATE,
        ROUND(A1.FYVALUE,2) AS ACTEPS,
        ROUND(E1.MEAN,2) AS FY1_EPS, 
        ROUND(E2.MEAN,2) AS FY2_EPS,
        PC.PRIMARYFLAGQFS,
        PC.CANCURR_HIST,
        CASE  WHEN (YEAR(E1.PERDATE) < YEAR(A1.DATE_) OR (YEAR(E1.PERDATE) = YEAR(A1.DATE_) AND MONTH(E1.PERDATE) < MONTH(A1.DATE_)))
            THEN
                CASE
                    WHEN (MONTH(E1.PERDATE) = 12) THEN E1.MEAN * (12 - MONTH(A1.DATE_))/12.0 + E2.MEAN * MONTH(A1.DATE_)/12.0
                    WHEN ((MONTH(E1.PERDATE) <> 12) AND (MONTH(A1.DATE_) > MONTH(E1.PERDATE))) THEN E1.MEAN * (12 - (MONTH(A1.DATE_) - MONTH(E1.PERDATE)))/12.0 + E2.MEAN * (MONTH(A1.DATE_) - MONTH(E1.PERDATE))/12.0
                    ELSE E1.MEAN * (MONTH(E1.PERDATE) - MONTH(A1.DATE_))/12.0 + E2.MEAN * (12 - (MONTH(E1.PERDATE) - MONTH(A1.DATE_)))/12.0
                END
            ELSE
                CASE
                    WHEN (MONTH(E1.PERDATE) = 12) THEN A1.FYVALUE * (12 - MONTH(A1.DATE_))/12.0 + E1.MEAN * MONTH(A1.DATE_)/12.0
                    WHEN (MONTH(E1.PERDATE) <> 12 AND MONTH(A1.DATE_) > MONTH(E1.PERDATE)) THEN A1.FYVALUE * (12 - (MONTH(A1.DATE_) - MONTH(E1.PERDATE)))/12.0 + E1.MEAN * (MONTH(A1.DATE_) - MONTH(E1.PERDATE))/12.0
                    ELSE A1.FYVALUE * (MONTH(E1.PERDATE) - MONTH(A1.DATE_))/12.0 + E1.MEAN * (12 - (MONTH(E1.PERDATE) - MONTH(A1.DATE_)))/12.0
            END
        END AS EPS_TTM
   
FROM SUPPORT_DB.DBO.COGNITIVESCALEUNIVERSE U
LEFT JOIN IBESV1MAPPING P
    ON  P.SECCODE = U.SECCODE
    AND P.REGCODE = U.REGCODE
    AND P.EXCHANGE = U.EXCHANGE
    AND P.[RANK] = (SELECT MIN([RANK]) FROM IBESV1MAPPING WHERE SECCODE = P.SECCODE AND REGCODE = P.REGCODE AND EXCHANGE = P.EXCHANGE)
LEFT JOIN (SELECT *,1 AS REGCODE FROM IBESINFO3 UNION ALL SELECT *,6 AS REGCODE FROM IBGSINFO3) I
    ON  I.CODE = P.VENCODE
    AND I.REGCODE = CASE P.EXCHANGE WHEN 1 THEN 1 WHEN 2 THEN 6 WHEN 0 THEN 6 END
LEFT JOIN ACTDATA A1 
    ON A1.CODE=I.CODE 
    AND A1.REGCODE=I.REGCODE 
LEFT JOIN ESTDATA E1 
    ON E1.CODE=I.CODE 
    AND E1.REGCODE = I.REGCODE
    AND A1.DATE_=E1.ESTDATE 
    AND E1.PERIOD = 1
LEFT JOIN ESTDATA E2
    ON E2.CODE=I.CODE 
    AND E2.REGCODE = I.REGCODE
    AND E2.PERIOD = 2
    AND A1.DATE_=E2.ESTDATE
LEFT JOIN PRIMARYBASIS PC
    ON I.CODE = ISNULL(PC.CODE_QFS,PC.CODE_HIST)
    --AND PC.DATE_QFS = (SELECT TOP 1 DATE_QFS FROM PRIMARYBASIS WHERE CODE_QFS = PC.CODE_QFS ORDER BY DATE_QFS DESC)
    AND PC.DATE_HIST = (SELECT TOP 1 DATE_HIST FROM PRIMARYBASIS WHERE CODE_HIST = PC.CODE_HIST ORDER BY DATE_HIST DESC)
 
--WHERE U.COUNTRYOFEXCHANGE IN ('UNITED KINGDOM') --@COUNTRIES
)
     
SELECT F.COUNTRYOFEXCHANGE
, F.ID
-- , F.IDENTIFIER
-- , F.ITICKER
, F.CODE
, F.QAD_CURRENCY_
-- , F.DFO_CURRENCY_
, F.ESTDATE
, F.FY1_PERDATE
, F.ACTEPS
, FY1_EPS
, FY2_EPS
, F.EPS_TTM AS QAD_EPS_TTM
, CASE WHEN REGCODE = 6 THEN ISNULL(PRIMARYFLAGQFS,(CASE WHEN CANCURR_HIST = ' ' THEN 'C' ELSE CANCURR_HIST END)) 
        WHEN REGCODE = 1 THEN 'C' ELSE 'NULL' END AS BASIS
 
-- ISNULL(CASE WHEN F.QAD_CURRENCY_ = F.DFO_CURRENCY_ THEN ROUND(F.EPS_TTM,2)
--           WHEN F.QAD_CURRENCY_ = 'GBP' AND F.DFO_CURRENCY_ = 'BPN' THEN ROUND(F.EPS_TTM*100,2)
--           ELSE ROUND(F.EPS_TTM*(TGTFX.MIDRATE/GBPFX.MIDRATE),2) END,
--       CASE WHEN F.QAD_CURRENCY_ = F.DFO_CURRENCY_ THEN ROUND(F.FY1_EPS,2)
--           WHEN F.QAD_CURRENCY_ = 'GBP' AND F.DFO_CURRENCY_ = 'BPN' THEN ROUND(F.FY1_EPS*100,2)
--           ELSE ROUND(F.FY1_EPS*(TGTFX.MIDRATE/GBPFX.MIDRATE),2) END
--       ) AS DFO_EPS_TTM
  
FROM T_12 F
-- LEFT JOIN DS2FXCODE GBP
--  ON F.QAD_CURRENCY_ = GBP.FROMCURRCODE
--  AND GBP.TOCURRCODE = 'GBP'
--  AND GBP.RATETYPECODE = 'SPOT'
-- LEFT JOIN DS2FXRATE GBPFX
--  ON GBP.EXRATEINTCODE = GBPFX.EXRATEINTCODE
--  AND GBPFX.EXRATEDATE = (SELECT MAX(EXRATEDATE) FROM DS2FXRATE WHERE EXRATEINTCODE = GBPFX.EXRATEINTCODE AND EXRATEDATE <= F.ESTDATE)
-- LEFT JOIN DS2FXCODE TGT
--  ON F.DFO_CURRENCY_ = TGT.FROMCURRCODE
--  AND TGT.TOCURRCODE = GBP.TOCURRCODE
--     AND TGT.RATETYPECODE = GBP.RATETYPECODE
-- LEFT JOIN DS2FXRATE TGTFX
--  ON  TGTFX.EXRATEINTCODE = TGT.EXRATEINTCODE
--  AND TGTFX.EXRATEDATE = GBPFX.EXRATEDATE
WHERE F.EPS_TTM IS NOT NULL --AND F.ESTDATE = (SELECT MAX(ESTDATE) FROM T_12 X WHERE X.ID = F.ID AND X.ESTDATE <= GETDATE()) -- TO REPLICATE DFO 'STATIC REQUEST' FUNCTIONALITY